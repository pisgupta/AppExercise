package com.truckdriver.utils;

import android.Manifest;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.support.annotation.RequiresApi;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.widget.Toast;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 * Created by siddharth.brahmi on 7/14/2016.
 * Util clas to get image from Camera and Gallery. It prompt the user to select camera and gallery and returns the uri of the image captured or selected.
 */

public class ImagePickerUtils {
    private static final String TAG = "ImagePickerUtils";
    public static String OPTION_SELECTED = "";

    /**
     * Single instance of this class.
     */
    private static ImagePickerUtils mSingleInstance;
    /**
     * Fragment Instance as we are using this class within the fragment so we need to get the activity result in fragment.
     */
    private Fragment mFragmentContext;


    public static final int REQUEST_CAMERA = 0, SELECT_FILE = 1;
    private ImagePickerListener mImagePickerListener;
    private String mImageTaskSelected;

    /**
     * Image picker listener to get the uri of the image selected or show message in case image is not selected due to any reason.
     */
    public interface ImagePickerListener {
        void onImageSelected(Uri uri);

        void onImageSelevtionError();
    }

    /**
     * Private constructor of {@link ImagePickerUtils} to restrict the access of the class.
     */
    private ImagePickerUtils() {

    }

//    private ImagePickerUtils(Fragment context, ImagePickerListener imagePickerListener) {
//
//    }

    /**
     * Attaching interface and context of the calling fragment so that callback will be sent to the respective class.
     *
     * @param context
     * @param imagePickerListener
     */
    private void initVariables(Fragment context, ImagePickerListener imagePickerListener) {
        mFragmentContext = context;
        mImagePickerListener = imagePickerListener;
    }

    /**
     * Used to get the single instance of this class.
     *
     * @param context
     * @param imagePickerListener
     * @return
     */
    public static final ImagePickerUtils getInstance(Fragment context, ImagePickerListener imagePickerListener) {
        if (mSingleInstance == null) {
            mSingleInstance = new ImagePickerUtils();
        }
        mSingleInstance.initVariables(context, imagePickerListener);
        return mSingleInstance;
    }

    public static final int MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE = 123;

    /**
     * Used to check permission in case of Android Marshmallow version.
     *
     * @param context
     * @return
     */
    private boolean checkPermission(final Context context) {
        int currentAPIVersion = Build.VERSION.SDK_INT;
        /**
         * Check if Android version of the device is equal to or greater than Marshmallow then  prompt user to allow access to read and write external storage.
         */
        if (currentAPIVersion >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                if (ActivityCompat.shouldShowRequestPermissionRationale((Activity) context, Manifest.permission.READ_EXTERNAL_STORAGE)) {
                    showPermissionAlert(context);
                } else {
                    ActivityCompat.requestPermissions((Activity) context, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);
                }
                return false;
            } else {
                return true;
            }
        } else {
            return true;
        }
    }


    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public static String getRealPathFromURI(Context context, Uri uri) {
        String filePath = "";
        String wholeID = DocumentsContract.getDocumentId(uri);

        // Split at colon, use second item in the array
        String id = wholeID.split(":")[1];

        String[] column = {MediaStore.Images.Media.DATA};

        // where id is equal to
        String sel = MediaStore.Images.Media._ID + "=?";

        Cursor cursor = context.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
                column, sel, new String[]{id}, null);

        int columnIndex = cursor.getColumnIndex(column[0]);

        if (cursor.moveToFirst()) {
            filePath = cursor.getString(columnIndex);
        }
        cursor.close();
        return filePath;
    }


    /**
     * Alert user with the importance of allowing permission.
     *
     * @param context
     */
    private void showPermissionAlert(final Context context) {
        AlertDialog.Builder alertBuilder = new AlertDialog.Builder(context);
        alertBuilder.setCancelable(true);
        alertBuilder.setTitle("Permission necessary");
        alertBuilder.setMessage("External storage permission is necessary");
        alertBuilder.setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
            @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
            public void onClick(DialogInterface dialog, int which) {
                ActivityCompat.requestPermissions((Activity) context, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE}, MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);
            }
        });
        AlertDialog alert = alertBuilder.create();
        alert.show();
    }

    /**
     * We be able to check if the permission is granted by the user. Need to override the onRequestPermissionsResult in the fragment and send the result of the callback to this method.
     *
     * @param requestCode
     * @param permissions
     * @param grantResults
     */
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE:
                /**
                 * check if gratn results length is greater than 0 and is equal to PERMISSION_GRANTED
                 */
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    /**
                     * Check if the user has camera or gallery to select the image.
                     */
                    if (mImageTaskSelected.equals("Take Photo"))
                        cameraIntent();
                    else if (mImageTaskSelected.equals("Choose from Library"))
                        galleryIntent();
                } else {
                    /**
                     * Show alert in case user has denied the request.
                     */
                    showPermissionAlert(mFragmentContext.getActivity());
                    //code for deny
                }
                break;
        }
    }

    /**
     * Dialog to show the options to select the image (Camera/Gallery)
     */
    public void selectImage() {
        final CharSequence[] items = {"Take Photo", "Choose from Library",
                "Cancel"};

        AlertDialog.Builder builder = new AlertDialog.Builder(mFragmentContext.getActivity());
        builder.setTitle("Add Photo!");
        builder.setItems(items, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int item) {
                boolean result = checkPermission(mFragmentContext.getActivity());
                mImageTaskSelected = items[item].toString();
                if (items[item].equals("Take Photo")) {
                    if (result)
                        cameraIntent();
                    OPTION_SELECTED = "Camera";
                } else if (items[item].equals("Choose from Library")) {
                    if (result)
                        galleryIntent();
                    OPTION_SELECTED = "Library";
                } else if (items[item].equals("Cancel")) {
                    dialog.dismiss();
                }
            }
        });
        builder.show();
    }

    /**
     * Fire an intent to get the image from gallery in case user has selected the gallery option.
     */
    private void galleryIntent() {
        Intent intent;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
            intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
            intent.addFlags(Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);
        } else {
            intent = new Intent(Intent.ACTION_GET_CONTENT);
        }
        intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true);
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        intent.setType("image/*");
        mFragmentContext.startActivityForResult(Intent.createChooser(intent, "Select File"), SELECT_FILE);
    }

    /**
     * Fire an intent to get the image from camera in case user has selected the camera option.
     */
    private void cameraIntent() {
        if (requestCameraPermission(Manifest.permission.CAMERA, REQUEST_CAMERA)) {
            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            
            mFragmentContext.startActivityForResult(intent, REQUEST_CAMERA);
        } else {
            Toast.makeText(mFragmentContext.getActivity(), "No permission for camera", Toast.LENGTH_SHORT).show();
        }

    }

    //Requesting permission for camera
    private boolean requestCameraPermission(String permission, Integer requestCode) {
        boolean cameraPermission = false;
        if (ContextCompat.checkSelfPermission(mFragmentContext.getActivity(), permission) != PackageManager.PERMISSION_GRANTED) {

            // Should we show an explanation?
            if (ActivityCompat.shouldShowRequestPermissionRationale(mFragmentContext.getActivity(), permission)) {
                Log.e(TAG, "requestCameraPermission: ");
                cameraPermission = false;
                //This is called if user has denied the permission before
                //In this case I am just asking the permission again
                ActivityCompat.requestPermissions(mFragmentContext.getActivity(), new String[]{permission}, requestCode);

            } else {
                Log.e(TAG, "requestCameraPermission: ");
                cameraPermission = false;
                ActivityCompat.requestPermissions(mFragmentContext.getActivity(), new String[]{permission}, requestCode);
            }
        } else {
            cameraPermission = true;
            Log.e(TAG, "requestCameraPermission: ");
        }
        return cameraPermission;
    }


    /**
     * call aback for getting the image from camera or gallery
     *
     * @param requestCode
     * @param resultCode
     * @param data
     */
    public void onActivityResult(int requestCode, int resultCode, Intent data) {

        /**
         * Check if result is ok then perform actions based on the request code SELECT_FILE||REQUEST_CAMERA
         */
        if (resultCode == Activity.RESULT_OK) {
            if (requestCode == SELECT_FILE)
                onSelectFromGalleryResult(data);
            else if (requestCode == REQUEST_CAMERA)
                onCaptureImageResult(data);
        }
    }

    /**
     * Process the data fetched from onActivityResult to get the image URI and saves the image as temporary file to use it in future.
     *
     * @param data
     */
    private void onCaptureImageResult(Intent data) {
        Bitmap thumbnail = (Bitmap) data.getExtras().get("data");
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        thumbnail.compress(Bitmap.CompressFormat.JPEG, 90, bytes);

        File destination = new File(Environment.getExternalStorageDirectory(),
                System.currentTimeMillis() + ".jpg");

        FileOutputStream fo;
        try {
            destination.createNewFile();
            fo = new FileOutputStream(destination);
            fo.write(bytes.toByteArray());
            fo.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Uri uri = Uri.fromFile(destination);
        ;
        mImagePickerListener.onImageSelected(uri);

    }

    /**
     * Process the data fetched from onActivityResult to the get the image URI.
     *
     * @param data
     */
    @SuppressWarnings("deprecation")
    private void onSelectFromGalleryResult(Intent data) {
        try {
            mImagePickerListener.onImageSelected(data.getData());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
